{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/app-routing.module.ts","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/confirmation-modal/confirmation-modal.component.ts","webpack:///src/app/confirmation-modal/confirmation-modal.component.html","webpack:///src/app/consumer-group-details/consumer-group-details.component.ts","webpack:///src/app/consumer-group-details/consumer-group-details.component.html","webpack:///src/app/consumer-groups.service.ts","webpack:///src/app/consumer-groups/consumer-groups.component.ts","webpack:///src/app/consumer-groups/consumer-groups.component.html","webpack:///src/app/error-modal/error-modal.component.ts","webpack:///src/app/error-modal/error-modal.component.html","webpack:///src/app/error-service.service.ts","webpack:///src/app/kafka-environment.service.ts","webpack:///src/app/kafka-environment/kafka-environment.component.ts","webpack:///src/app/kafka-environment/kafka-environment.component.html","webpack:///src/app/topic-details/topic-details.component.ts","webpack:///src/app/topic-details/topic-details.component.html","webpack:///src/app/topic.service.ts","webpack:///src/app/topic/topic.component.ts","webpack:///src/app/topic/topic.component.html","webpack:///src/app/utils/pulling.ts","webpack:///src/environments/environment.ts","webpack:///src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","routes","AppRoutingModule","forRoot","imports","AppComponent","environmentService","router","route","applicationLoaded","params","subscribe","loadEnvironment","result","selector","templateUrl","styleUrls","appRoutes","path","component","AppModule","declarations","providers","bootstrap","ConfirmationModalComponent","confirmationResult","hidden","accepted","emit","showModal","ConsumerGroupDetailsComponent","consumerGroupsService","errorService","removeSubscribtions","name","environment","getter","getConsumerGroup","updater","cg","dataCollector","calulcateConsumerGroupDataDiff","consumerGroup","lagSum","partitions","map","it","lag","reduce","part","sum","lastCGUpdate","Date","now","consumerGroupSubscription","metaDataGetter","getConsumerGroupMetaData","metaDataUpdater","consumerGroupMetaData","consumerGroupMDSubscription","shouldDelete","delete","deleteConsumerGroup","pipe","val","error","showError","navigateByUrl","assignments","assignment","topic","partition","join","newConsumerGroup","undefined","lagDiffMap","Map","forEach","set","lagValue","lagPerSecound","messagesPerSec","lagPerSec","timeDiffSec","newMessages","messageCount","newLag","lagCount","Math","round","lastLog","a","b","ConsumerGroupsService","httpClient","url","get","providedIn","ConsumerGroupsComponent","getConsumerGroups","cGroups","consumerGroups","displayGroups","event","filterValue","target","value","toLowerCase","filter","includes","onFilterInput","ErrorModalComponent","errorServiceService","message","console","log","subscription","subscriveToErrors","unsubscribe","ErrorServiceService","errorsStream","next","errorHandler","KafkaEnvironmentService","serverUrl","getAwailableEnvironments","environments","_","rsult","split","decodeURI","KafkaEnvironmentComponent","kafkaEnvironmentService","env","selectedEnv","getCurrentEnvironment","envName","urlParts","onSelectChange","TopicDetailsComponent","topicService","CONSUMER_GROUP_PULL_INTERVAL_MS","getTopicDetails","getTopic","getConsumerGroupsForTopic","topicUpdateSubscription","calculateMessagePerSec","lastUpdate","consumerGroupsUpdateSubscription","getLastMessage","partitionNumber","JSON","stringify","deleteTopic","newTopicData","messages","secPassed","TopicService","topicName","responseType","TopicComponent","topics","displayTopics","getTopics","toString","pull","delayMs","production","bootstrapModule","catch","err"],"mappings":";;;;;;;;;;;;;;;;;AAAA,aAASA,wBAAT,CAAkCC,GAAlC,EAAuC;AACtC;AACA;AACA,aAAOC,OAAO,CAACC,OAAR,GAAkBC,IAAlB,CAAuB,YAAW;AACxC,YAAIC,CAAC,GAAG,IAAIC,KAAJ,CAAU,yBAAyBL,GAAzB,GAA+B,GAAzC,CAAR;AACAI,SAAC,CAACE,IAAF,GAAS,kBAAT;AACA,cAAMF,CAAN;AACA,OAJM,CAAP;AAKA;;AACDL,4BAAwB,CAACQ,IAAzB,GAAgC,YAAW;AAAE,aAAO,EAAP;AAAY,KAAzD;;AACAR,4BAAwB,CAACG,OAAzB,GAAmCH,wBAAnC;AACAS,UAAM,CAACC,OAAP,GAAiBV,wBAAjB;AACAA,4BAAwB,CAACW,EAAzB,GAA8B,yCAA9B;;;;;;;;;;;;;;;;ACZA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAIA,QAAMC,MAAM,GAAW,EAAvB;;QAMaC,gB;;;;;YAAAA;;;;yBAAAA,gB;AAAgB,O;AAAA,gBAHlB,CAAC,6DAAaC,OAAb,CAAqBF,MAArB,CAAD,CAGkB,EAFjB,4DAEiB;;;;0HAAhBC,gB,EAAgB;AAAA;AAAA,kBAFjB,4DAEiB;AAAA,O;AAFL,K;;;;;sEAEXA,gB,EAAgB;cAJ5B,sDAI4B;eAJnB;AACRE,iBAAO,EAAE,CAAC,6DAAaD,OAAb,CAAqBF,MAArB,CAAD,CADD;AAERF,iBAAO,EAAE,CAAC,4DAAD;AAFD,S;AAImB,Q;;;;;;;;;;;;;;;;;;ACV7B;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;ACAA;;AACI;;AACI;;AAAsE;;AAAM;;AAC5E;;AAA+E;;AAAc;;AAC7F;;AACJ;;AACA;;AACI;;AACA;;AACJ;;AACJ;;;;;;AARW;;AAAA;;AACA;;AAAA;;;;;;AASX;;AACI;;AAAG;;AAAU;;AACjB;;;;QDJaM,Y;;;AAGX,4BACSC,kBADT,EAEUC,MAFV,EAGUC,KAHV,EAGiC;AAAA;;AAFxB,aAAAF,kBAAA,GAAAA,kBAAA;AACC,aAAAC,MAAA,GAAAA,MAAA;AACA,aAAAC,KAAA,GAAAA,KAAA;AALV,aAAAC,iBAAA,GAAoB,KAApB;AAKoC;;;;mCAE5B;AAAA;;AACN,eAAKD,KAAL,CAAWE,MAAX,CAAkBC,SAAlB,CAA4B,UAAAD,MAAM,EAAI;AACpC,iBAAI,CAACJ,kBAAL,CAAwBM,eAAxB,GAA0CD,SAA1C,CACE,UAAAE,MAAM,EAAI;AACR,mBAAI,CAACJ,iBAAL,GAAyBI,MAAzB;AACD,aAHH;AAKD,WAND;AAOD;;;;;;;uBAhBUR,Y,EAAY,mJ,EAAA,uH,EAAA,+H;AAAA,K;;;YAAZA,Y;AAAY,+B;AAAA,c;AAAA,a;AAAA,sF;AAAA;AAAA;ACVzB;;AAYA;;;;AAZK;;AAYA;;AAAA;;;;;;;;;sEDFQA,Y,EAAY;cALxB,uDAKwB;eALd;AACTS,kBAAQ,EAAE,UADD;AAETC,qBAAW,EAAE,sBAFJ;AAGTC,mBAAS,EAAE,CAAC,qBAAD;AAHF,S;AAKc,Q;;;;;;;;;;;;;;;;;;;;;;;;;;AEVzB;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAeA,QAAMC,SAAS,GAAW,CACxB;AAAEC,UAAI,EAAE,qBAAR;AAA+BC,eAAS,EAAE;AAA1C,KADwB,EAExB;AAAED,UAAI,EAAE,2BAAR;AAAqCC,eAAS,EAAE;AAAhD,KAFwB,EAGxB;AAAED,UAAI,EAAE,8BAAR;AAAwCC,eAAS,EAAE;AAAnD,KAHwB,EAIxB;AAAED,UAAI,EAAE,oCAAR;AAA8CC,eAAS,EAAE;AAAzD,KAJwB,CAA1B;;QA6BaC,S;;;;;YAAAA,S;AAAS,kBAFR,2DAEQ;;;;yBAATA,S;AAAS,O;AAAA,iBAHT,E;AAAE,gBARJ,CACP,uEADO,EAEP,oEAFO,EAGP,qEAHO,EAIP,6DAAajB,OAAb,CACEc,SADF,CAJO,CAQI;;;;0HAGFG,S,EAAS;AAAA,uBApBlB,2DAoBkB,EAnBlB,qEAmBkB,EAlBlB,kGAkBkB,EAjBlB,4FAiBkB,EAhBlB,sHAgBkB,EAflB,yGAekB,EAdlB,uFAckB,EAblB,4GAakB;AAbQ,kBAG1B,uEAH0B,EAI1B,oEAJ0B,EAK1B,qEAL0B,EAKV,4DALU;AAaR,O;AARF,K;;;;;sEAQPA,S,EAAS;cAtBrB,sDAsBqB;eAtBZ;AACRC,sBAAY,EAAE,CACZ,2DADY,EAEZ,qEAFY,EAGZ,kGAHY,EAIZ,4FAJY,EAKZ,sHALY,EAMZ,yGANY,EAOZ,uFAPY,EAQZ,4GARY,CADN;AAWRjB,iBAAO,EAAE,CACP,uEADO,EAEP,oEAFO,EAGP,qEAHO,EAIP,6DAAaD,OAAb,CACEc,SADF,CAJO,CAXD;AAmBRK,mBAAS,EAAE,EAnBH;AAoBRC,mBAAS,EAAE,CAAC,2DAAD;AApBH,S;AAsBY,Q;;;;;;;;;;;;;;;;;;AC5CtB;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;;;ACEI;;AACI;;AACI;;AAAG;;AAAW;;AACd;;AAAQ;AAAA;;AAAA;;AAAA,oCAAoB,IAApB;AAAwB,SAAxB;;AAA2B;;AAAM;;AACzC;;AAAQ;AAAA;;AAAA;;AAAA,oCAAoB,KAApB;AAAyB,SAAzB;;AAA4B;;AAAM;;AAC9C;;AACJ;;;;;;AAJW;;AAAA;;;;QDGFC,0B;;;AAOX,4CAAc;AAAA;;AAHJ,aAAAC,kBAAA,GAAqB,IAAI,0DAAJ,EAArB;AAEV,aAAAC,MAAA,GAAS,IAAT;AACiB;;;;mCAET,CACP;;;mCAEUC,Q,EAAmB;AAC5B,eAAKF,kBAAL,CAAwBG,IAAxB,CAA6BD,QAA7B;AACA,eAAKD,MAAL,GAAc,IAAd;AACD;;;oCAEW;AACV,eAAKA,MAAL,GAAc,KAAd;AACD;;;;;;;uBAnBUF,0B;AAA0B,K;;;YAA1BA,0B;AAA0B,6C;AAAA;AAAA;AAAA;AAAA,O;AAAA;AAAA;AAAA,O;AAAA,c;AAAA,a;AAAA,uI;AAAA;AAAA;ACPvC;;AACI;;AAAQ;AAAA,mBAAS,IAAAK,SAAA,EAAT;AAAoB,WAApB;;AAAsB;;AAAc;;AAC5C;;AAOJ;;;;AARkC;;AAAA;;AACzB;;AAAA;;;;;;;;;sEDKIL,0B,EAA0B;cALtC,uDAKsC;eAL5B;AACTV,kBAAQ,EAAE,wBADD;AAETC,qBAAW,EAAE,qCAFJ;AAGTC,mBAAS,EAAE,CAAC,oCAAD;AAHF,S;AAK4B,Q;;;;gBAEpC;;;gBACA;;;gBACA;;;;;;;;;;;;;;;;;;;;AEXH;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;ACsBQ;;AACI;;AAAI;;AAAgC;;AACpC;;AAAI;;AAAmC;;AACvC;;AAAI;;AAAqB;;AAC7B;;;;;;AAHQ;;AAAA;;AACA;;AAAA;;AACA;;AAAA;;;;;;AA0BJ;;AACI;;AAAI;;AAA8B;;AAClC;;AAAI;;AAA8B;;AAClC;;AAAI;;AAA0B;;AAC9B;;AAAI;;AAAyE;;AACjF;;;;;;;;AAJQ;;AAAA;;AACA;;AAAA;;AACA;;AAAA;;AACA;;AAAA;;;;;;AAzBhB;;AACI;;AACI;;AACI;;AAAI;;AAAK;;AACT;;AAAI;;AAAkB;;AACtB;;AAAI;;AAAW;;AACnB;;AACA;;AACI;;AAAI;;AAA4C;;AAChD;;AAAI;;AAA2C;;AAC/C;;AAAI;;AAAqC;;AAC7C;;AACJ;;AAEA;;AACI;;AACI;;AAAI;;AAAS;;AACb;;AAAI;;AAAS;;AACb;;AAAI;;AAAI;;AACR;;AAAI;;AAAiB;;AACzB;;AACA;;AAMJ;;AACJ;;;;;;AApBgB;;AAAA;;AACA;;AAAA;;AACA;;AAAA;;AAWJ;;AAAA;;;;;;AAQZ;;AACI;;AAAG;;AAAU;;AACjB;;;;;;AAOI;;AACI;;AAAI;;AAAkD;;AAAS;;AAAI;;AACvE;;;;;;;;AADW;;AAAA;;AAA+C;;AAAA;;;;;;;;AArElE;;AACI;;AAAI;;AAAsB;;AAC1B;;AACI;;AACI;;AAAI;;AAAS;;AACb;;AAAI;;AAAuB;;AAC3B;;AAAI;;AAA6B;;AACrC;;AACA;;AACI;;AAAI;;AAAU;;AACd;;AAAI;;AAA2B;;AAC/B;;AAAI;;AAAgC;;AACxC;;AACJ;;AACA;;AAAI;;AAAU;;AAEd;;AACI;;AACI;;AAAI;;AAAI;;AACR;;AAAI;;AAAY;;AAChB;;AAAI;;AAAG;;AACX;;AACA;;AAKJ;;AAEA;;AAAI;;AAAoB;;AACxB;;AA6BA;;AAIA;;AAAI;;AAAM;;AACV;;AACI;;AACI;;AAAI;;AAAI;;AACZ;;AACA;;AAGJ;;AACA;;AAAwB;AAAA;;AAAA;;AAAA;AAAA;;AAExB;;AACJ;;;;;;AA1EQ;;AAAA;;AAQQ;;AAAA;;AACA;;AAAA;;AACA;;AAAA;;AAWJ;;AAAA;;AAQH;;AAAA;;AA6BA;;AAAA;;AASG;;AAAA;;AAKJ;;AAAA;;;;QD5DKc,6B;;;AAWX,6CACUC,qBADV,EAEUvB,KAFV,EAGUwB,YAHV,EAIUzB,MAJV,EAIwB;AAAA;;AAHd,aAAAwB,qBAAA,GAAAA,qBAAA;AACA,aAAAvB,KAAA,GAAAA,KAAA;AACA,aAAAwB,YAAA,GAAAA,YAAA;AACA,aAAAzB,MAAA,GAAAA,MAAA;AACL;;;;mCAEM;AAAA;;AACT,eAAKC,KAAL,CAAWE,MAAX,CAAkBC,SAAlB,CAA4B,UAAAD,MAAM,EAAI;AACpC,kBAAI,CAACuB,mBAAL;;AACA,gBAAMC,IAAI,GAAGxB,MAAM,CAACwB,IAApB;AACA,kBAAI,CAACC,WAAL,GAAmBzB,MAAM,CAACyB,WAA1B;;AAEA,gBAAMC,MAAM,GAAG,SAATA,MAAS;AAAA,qBAAM,MAAI,CAACL,qBAAL,CAA2BM,gBAA3B,CAA4CH,IAA5C,EAAkD,MAAI,CAACC,WAAvD,CAAN;AAAA,aAAf;;AACA,gBAAMG,OAAO,GAAG,SAAVA,OAAU,CAACC,EAAD,EAAuB;AACrC,oBAAI,CAACC,aAAL,GAAqB,MAAI,CAACC,8BAAL,CAAoCF,EAApC,CAArB;AACA,oBAAI,CAACG,aAAL,GAAqBH,EAArB;AACA,oBAAI,CAACI,MAAL,GAAcJ,EAAE,CAACK,UAAH,CAAcC,GAAd,CAAkB,UAAAC,EAAE;AAAA,uBAAIA,EAAE,CAACC,GAAP;AAAA,eAApB,EAAgCC,MAAhC,CAAuC,UAACC,IAAD,EAAOC,GAAP;AAAA,uBAAeD,IAAI,GAAGC,GAAtB;AAAA,eAAvC,CAAd;AACA,oBAAI,CAACC,YAAL,GAAoBC,IAAI,CAACC,GAAL,EAApB;AACD,aALD;;AAMA,kBAAI,CAACC,yBAAL,GAAiC,4DAAKlB,MAAL,EAAaE,OAAb,EAAsB3B,SAAtB,EAAjC;;AAEA,gBAAM4C,cAAc,GAAG,SAAjBA,cAAiB;AAAA,qBAAM,MAAI,CAACxB,qBAAL,CAA2ByB,wBAA3B,CAAoDtB,IAApD,EAA0D,MAAI,CAACC,WAA/D,CAAN;AAAA,aAAvB;;AACA,gBAAMsB,eAAe,GAAG,SAAlBA,eAAkB,CAAAlB,EAAE;AAAA,qBAAI,MAAI,CAACmB,qBAAL,GAA6BnB,EAAjC;AAAA,aAA1B;;AACA,kBAAI,CAACoB,2BAAL,GAAmC,4DAAKJ,cAAL,EAAqBE,eAArB,EAAsC,KAAtC,EAA6C9C,SAA7C,EAAnC;AACD,WAjBD;AAkBD;;;sCAEU;AACT,eAAKsB,mBAAL;AACD;;;8CAE6B;AAC5B,6EAAY,KAAKqB,yBAAjB;AACA,6EAAY,KAAKK,2BAAjB;AACD;;;uCAEcC,Y,EAAuB;AACpC,cAAIA,YAAJ,EAAkB;AAChB,iBAAKC,MAAL;AACD;AACF;;;kCAEQ;AAAA;;AACP,eAAK9B,qBAAL,CAA2B+B,mBAA3B,CAA+C,KAAKpB,aAAL,CAAmBR,IAAlE,EAAwE,KAAKC,WAA7E,EACG4B,IADH,CACQ,kEAAW,UAAAC,GAAG;AAAA,mBAAI,gDAAGA,GAAG,CAACC,KAAP,CAAJ;AAAA,WAAd,CADR,EAEGtD,SAFH,CAEa,UAAAsD,KAAK,EAAI;AAClB,gBAAIA,KAAJ,EAAW;AACT,oBAAI,CAACjC,YAAL,CAAkBkC,SAAlB,CAA4BD,KAA5B;AACD,aAFD,MAEO;AACL,oBAAI,CAAC1D,MAAL,CAAY4D,aAAZ,CAA0B,MAAM,MAAI,CAAChC,WAAX,GAAyB,kBAAnD;AACD;AACF,WARH;AASD;;;gDAEuBiC,W,EAA6B;AACnD,iBAAOA,WAAW,CAACvB,GAAZ,CAAgB,UAAAwB,UAAU;AAAA,mBAAIA,UAAU,CAACC,KAAX,GAAmB,GAAnB,GAAyBD,UAAU,CAACE,SAAxC;AAAA,WAA1B,EAA6EC,IAA7E,CAAkF,KAAlF,CAAP;AACD;;;uDAE8BC,gB,EAA+B;AAC5D,cAAI,KAAK/B,aAAL,KAAuBgC,SAA3B,EAAsC;AACpC,gBAAMC,UAAU,GAAG,IAAIC,GAAJ,EAAnB;AACAH,4BAAgB,CAAC7B,UAAjB,CAA4BiC,OAA5B,CAAoC,UAAA5B,IAAI;AAAA,qBAAI0B,UAAU,CAACG,GAAX,CAAe7B,IAAI,CAACsB,SAApB,EAA+B;AAAEQ,wBAAQ,EAAE,CAAZ;AAAeC,6BAAa,EAAE;AAA9B,eAA/B,CAAJ;AAAA,aAAxC;AACA,mBAAO;AACLC,4BAAc,EAAE,CADX;AAELC,uBAAS,EAAE,CAFN,CAGL;;AAHK,aAAP;AAKD;;AACD,cAAMC,WAAW,GAAG,CAAC/B,IAAI,CAACC,GAAL,KAAa,KAAKF,YAAnB,IAAmC,IAAvD;AACA,cAAMiC,WAAW,GAAG,KAAKC,YAAL,CAAkBZ,gBAAlB,IAAsC,KAAKY,YAAL,CAAkB,KAAK3C,aAAvB,CAA1D;AACA,cAAM4C,MAAM,GAAG,KAAKC,QAAL,CAAcd,gBAAd,IAAkC,KAAKc,QAAL,CAAc,KAAK7C,aAAnB,CAAjD;AACA,cAAMuC,cAAc,GAAGO,IAAI,CAACC,KAAL,CAAYL,WAAW,GAAGD,WAAf,GAA8B,GAAzC,IAAgD,GAAvE;AACA,cAAMD,SAAS,GAAGM,IAAI,CAACC,KAAL,CAAYH,MAAM,GAAGH,WAAV,GAAyB,GAApC,IAA2C,GAA7D;AAEA,iBAAO;AACLF,0BAAc,EAAdA,cADK;AAELC,qBAAS,EAATA;AAFK,WAAP;AAID;;;qCAEoBxC,a,EAA4B;AAC/C,iBAAOA,aAAa,CAACE,UAAd,CAAyBC,GAAzB,CAA6B,UAAAC,EAAE;AAAA,mBAAIA,EAAE,CAACyB,SAAH,CAAamB,OAAjB;AAAA,WAA/B,EAAyD1C,MAAzD,CAAgE,UAAC2C,CAAD,EAAIC,CAAJ;AAAA,mBAAUD,CAAC,GAAGC,CAAd;AAAA,WAAhE,CAAP;AACD;;;iCAEgBlD,a,EAA4B;AAC3C,iBAAOA,aAAa,CAACE,UAAd,CAAyBC,GAAzB,CAA6B,UAAAC,EAAE;AAAA,mBAAIA,EAAE,CAACC,GAAP;AAAA,WAA/B,EAA2CC,MAA3C,CAAkD,UAAC2C,CAAD,EAAIC,CAAJ;AAAA,mBAAUD,CAAC,GAAGC,CAAd;AAAA,WAAlD,CAAP;AACD;;;;;;;uBAlGU9D,6B,EAA6B,+I,EAAA,+H,EAAA,2I,EAAA,uH;AAAA,K;;;YAA7BA,6B;AAA6B,iD;AAAA,c;AAAA,a;AAAA,qI;AAAA;AAAA;ACb1C;;;;AAAK;;;;;;;;;sEDaQA,6B,EAA6B;cALzC,uDAKyC;eAL/B;AACThB,kBAAQ,EAAE,4BADD;AAETC,qBAAW,EAAE,yCAFJ;AAGTC,mBAAS,EAAE,CAAC,wCAAD;AAHF,S;AAK+B,Q;;;;;;;;;;;;;;;;;;;;;;;;;;;;AEb1C;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QAOa6E,qB;;;AAIX,qCACUC,UADV,EACgC;AAAA;;AAAtB,aAAAA,UAAA,GAAAA,UAAA;AAHF,aAAAC,GAAA,GAAM,4BAAN;AAIH;;;;+CAEkB5D,W,EAAmB;AACxC,iBAAO,KAAK2D,UAAL,CAAgBE,GAAhB,CAA8B,KAAKD,GAAL,GAAW5D,WAAX,GAAyB,kBAAvD,CAAP;AACD;;;0CAGiBA,W,EAAmB;AACnC,iBAAO,KAAK2D,UAAL,CAAgBE,GAAhB,CAAqC,KAAKD,GAAL,GAAW5D,WAAX,GAAyB,kBAA9D,CAAP;AACD;;;iDAEwBD,I,EAAcC,W,EAAqB;AAC1D,iBAAO,KAAK2D,UAAL,CAAgBE,GAAhB,CAA2C,KAAKD,GAAL,GAAW5D,WAAX,GAAyB,kBAAzB,GAA8C,GAA9C,GAAoDD,IAApD,GAA2D,YAAtG,CAAP;AACD;;;yCAEgBA,I,EAAcC,W,EAAmB;AAChD,iBAAO,KAAK2D,UAAL,CAAgBE,GAAhB,CAAmC,KAAKD,GAAL,GAAW5D,WAAX,GAAyB,kBAAzB,GAA8C,GAA9C,GAAoDD,IAAvF,CAAP;AACD;;;4CAEmBA,I,EAAcC,W,EAAmB;AACnD,iBAAO,KAAK2D,UAAL,CAAgBjC,MAAhB,CAAuB,KAAKkC,GAAL,GAAW5D,WAAX,GAAyB,kBAAzB,GAA8C,GAA9C,GAAoDD,IAA3E,CAAP;AACD;;;;;;;uBA3BU2D,qB,EAAqB,uH;AAAA,K;;;aAArBA,qB;AAAqB,eAArBA,qBAAqB,K;AAAA,kBAFpB;;;;;sEAEDA,qB,EAAqB;cAHjC,wDAGiC;eAHtB;AACVI,oBAAU,EAAE;AADF,S;AAGsB,Q;;;;;;;;;;;;;;;;;;;;;;ACPlC;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;ACUQ;;AACI;;AAAI;;AAAuC;;AAAsB;;AAAI;;AACrE;;AAAI;;AAA4B;;AACpC;;;;;;AAFW;;AAAA;;AAAoC;;AAAA;;AACvC;;AAAA;;;;QDHHC,uB;;;AAKX,uCACUnE,qBADV,EAEUvB,KAFV,EAE+B;AAAA;;AADrB,aAAAuB,qBAAA,GAAAA,qBAAA;AACA,aAAAvB,KAAA,GAAAA,KAAA;AACL;;;;mCAGM;AAAA;;AACT,eAAKA,KAAL,CAAWE,MAAX,CAAkBC,SAAlB,CAA4B,UAAAD,MAAM,EAAI;AACpC,gBAAMyB,WAAW,GAAGzB,MAAM,CAACyB,WAA3B;;AAEA,kBAAI,CAACJ,qBAAL,CAA2BoE,iBAA3B,CAA6ChE,WAA7C,EACGxB,SADH,CACa,UAAAyF,OAAO,EAAI;AACpB,oBAAI,CAACC,cAAL,GAAsBD,OAAtB;AACA,oBAAI,CAACE,aAAL,GAAqBF,OAArB;AACD,aAJH;AAKD,WARD;AASD;;;sCAEaG,K,EAAO;AACnB,cAAMC,WAAW,GAAGD,KAAK,CAACE,MAAN,CAAaC,KAAb,CAAmBC,WAAnB,EAApB;;AACA,cAAIH,WAAW,KAAK9B,SAAhB,IAA6B8B,WAAW,KAAK,EAAjD,EAAqD;AACnD,iBAAKF,aAAL,GAAqB,KAAKD,cAA1B;AACD,WAFD,MAEO;AACL,iBAAKC,aAAL,GAAqB,KAAKD,cAAL,CAAoBO,MAApB,CAA2B,UAAArE,EAAE;AAAA,qBAAIA,EAAE,CAACL,IAAH,CAAQyE,WAAR,GAAsBE,QAAtB,CAA+BL,WAA/B,CAAJ;AAAA,aAA7B,CAArB;AACD;AACF;;;;;;;uBA9BUN,uB,EAAuB,+I,EAAA,+H;AAAA,K;;;YAAvBA,uB;AAAuB,0C;AAAA,e;AAAA,a;AAAA,4K;AAAA;AAAA;ACTpC;;AACI;;AACI;;AAA+C;;AAAO;;AACtD;;AAA8C;AAAA,mBAAS,IAAAY,aAAA,QAAT;AAA8B,WAA9B;;AAA9C;;AACJ;;AACA;;AACI;;AACI;;AAAI;;AAAI;;AACR;;AAAI;;AAAM;;AACd;;AACA;;AAIJ;;AACJ;;;;AALY;;AAAA;;;;;;;;;sEDDCZ,uB,EAAuB;cALnC,uDAKmC;eALzB;AACTpF,kBAAQ,EAAE,qBADD;AAETC,qBAAW,EAAE,kCAFJ;AAGTC,mBAAS,EAAE,CAAC,iCAAD;AAHF,S;AAKyB,Q;;;;;;;;;;;;;;;;;;;;;;;;AETpC;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;;;ACAA;;AACI;;AACI;;AAAG;;AAAW;;AACd;;AAAQ;AAAA;;AAAA;;AAAA;AAAA;;AAAuB;;AAAE;;AACrC;;AACJ;;;;;;AAHW;;AAAA;;;;QDOE+F,mB;;;AAKX,mCAAoBC,mBAApB,EAA8D;AAAA;;AAA1C,aAAAA,mBAAA,GAAAA,mBAAA;AAHpB,aAAAC,OAAA,GAAU,UAAV;AACA,aAAAvF,MAAA,GAAS,IAAT;AAEiE;;;;mCAEzD;AAAA;;AACNwF,iBAAO,CAACC,GAAR,CAAY,uBAAZ;AACA,eAAKC,YAAL,GAAoB,KAAKJ,mBAAL,CAAyBK,iBAAzB,CAA2C,UAAApD,KAAK,EAAI;AACtE,kBAAI,CAACvC,MAAL,GAAc,KAAd;AACA,kBAAI,CAACuF,OAAL,GAAehD,KAAf;AACD,WAHmB,CAApB;AAID;;;sCAEU;AACT,eAAKmD,YAAL,CAAkBE,WAAlB;AACD;;;qCAEY;AACX,eAAK5F,MAAL,GAAc,IAAd;AACD;;;;;;;uBArBUqF,mB,EAAmB,2I;AAAA,K;;;YAAnBA,mB;AAAmB,sC;AAAA,c;AAAA,a;AAAA,oG;AAAA;AAAA;ACThC;;;;AAAK;;;;;;;;;sEDSQA,mB,EAAmB;cAL/B,uDAK+B;eALrB;AACTjG,kBAAQ,EAAE,iBADD;AAETC,qBAAW,EAAE,8BAFJ;AAGTC,mBAAS,EAAE,CAAC,6BAAD;AAHF,S;AAKqB,Q;;;;;;;;;;;;;;;;;;;;;;AEThC;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QAMauG,mB;;;AAIX,qCAAc;AAAA;;AAFN,aAAAC,YAAA,GAAe,IAAI,4CAAJ,EAAf;AAES;;;;kCAEPvD,K,EAAe;AACvBiD,iBAAO,CAACC,GAAR,CAAY,kBAAkBlD,KAA9B;AACA,eAAKuD,YAAL,CAAkBC,IAAlB,CAAuBxD,KAAvB;AACD;;;0CAEiByD,Y,EAA+B;AAC/CR,iBAAO,CAACC,GAAR,CAAY,kCAAZ;AACA,iBAAO,KAAKK,YAAL,CAAkB7G,SAAlB,CAA4B+G,YAA5B,CAAP;AACD;;;;;;;uBAdUH,mB;AAAmB,K;;;aAAnBA,mB;AAAmB,eAAnBA,mBAAmB,K;AAAA,kBAFlB;;;;;sEAEDA,mB,EAAmB;cAH/B,wDAG+B;eAHpB;AACVtB,oBAAU,EAAE;AADF,S;AAGoB,Q;;;;;;;;;;;;;;;;;;;;ACNhC;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QASa0B,uB;;;AAMX,uCACU7B,UADV,EAEUvF,MAFV,EAEwB;AAAA;;AADd,aAAAuF,UAAA,GAAAA,UAAA;AACA,aAAAvF,MAAA,GAAAA,MAAA;AAJO,aAAAqH,SAAA,GAAY,2BAAZ;AAKZ;;;;mDAEmB;AACtB,iBAAO,KAAK9B,UAAL,CAAgBE,GAAhB,CAAwC,KAAK4B,SAAL,GAAiB,eAAzD,CAAP;AACD;;;0CAEc;AAAA;;AACb,iBAAO,KAAKC,wBAAL,GACJ9D,IADI,CAEH,2DAAI,UAAA+D,YAAY;AAAA,mBAAI,MAAI,CAACA,YAAL,GAAoBA,YAAxB;AAAA,WAAhB,CAFG,EAGH,2DAAI,UAAAC,CAAC;AAAA,mBAAI,IAAJ;AAAA,WAAL,CAHG,CAAP;AAKD;;;gDAGoB;AACnB,cAAMC,KAAK,GAAG,KAAKzH,MAAL,CAAYwF,GAAZ,CAAgBkC,KAAhB,CAAsB,GAAtB,EAA2B,CAA3B,KAAiC,KAAKH,YAAL,CAAkB,CAAlB,EAAqB5F,IAApE;AACA,iBAAOgG,SAAS,CAACF,KAAD,CAAhB;AACD;;;;;;;uBA3BUL,uB,EAAuB,uH,EAAA,8G;AAAA,K;;;aAAvBA,uB;AAAuB,eAAvBA,uBAAuB,K;AAAA,kBAFtB;;;;;sEAEDA,uB,EAAuB;cAHnC,wDAGmC;eAHxB;AACV1B,oBAAU,EAAE;AADF,S;AAGwB,Q;;;;;;;;;;;;;;;;;;;;;;;;ACTpC;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;ACGY;;AACI;;AACJ;;;;;;;;AAFmC;;AAC/B;;AAAA;;;;QDKHkC,yB;;;AAIX,yCACUC,uBADV,EAEU7H,MAFV,EAEwB;AAAA;;AADd,aAAA6H,uBAAA,GAAAA,uBAAA;AACA,aAAA7H,MAAA,GAAAA,MAAA;AAHV,aAAAuH,YAAA,GAAyB,EAAzB;AAIK;;;;mCAEG;AAAA;;AACN,eAAKM,uBAAL,CAA6BP,wBAA7B,GAAwDlH,SAAxD,CACE,UAAAmC,EAAE;AAAA,mBAAI,MAAI,CAACgF,YAAL,GAAoBhF,EAAE,CAACD,GAAH,CAAO,UAAAwF,GAAG;AAAA,qBAAIA,GAAG,CAACnG,IAAR;AAAA,aAAV,CAAxB;AAAA,WADJ;AAGA,eAAKoG,WAAL,GAAmB,KAAKF,uBAAL,CAA6BG,qBAA7B,EAAnB;AACD;;;uCAEchC,K,EAAK;AAClB,cAAMiC,OAAO,GAAGjC,KAAK,CAACE,MAAN,CAAaC,KAA7B;AACA,eAAK4B,WAAL,GAAmB,KAAKR,YAAL,CAAkBlB,MAAlB,CAAyB,UAAA9D,EAAE;AAAA,mBAAIA,EAAE,KAAK0F,OAAX;AAAA,WAA3B,EAA+C,CAA/C,CAAnB;AACA,cAAMC,QAAQ,GAAG,KAAKlI,MAAL,CAAYwF,GAAZ,CAAgBkC,KAAhB,CAAsB,GAAtB,CAAjB;AACAQ,kBAAQ,CAAC,CAAD,CAAR,GAAcD,OAAd;AACA,eAAKjI,MAAL,CAAY4D,aAAZ,CAA0BsE,QAAQ,CAACjE,IAAT,CAAc,GAAd,CAA1B;AACD;;;;;;;uBAtBU2D,yB,EAAyB,mJ,EAAA,uH;AAAA,K;;;YAAzBA,yB;AAAyB,4C;AAAA,c;AAAA,a;AAAA,+M;AAAA;AAAA;ACTtC;;AACI;;AAAyB;;AAAY;;AACjC;;AAAQ;AAAA,mBAAU,IAAAO,cAAA,QAAV;AAAgC,WAAhC;;AACJ;;AAGJ;;AACR;;;;AAJgF;;AAAA;;;;;;;;;sEDMnEP,yB,EAAyB;cALrC,uDAKqC;eAL3B;AACTrH,kBAAQ,EAAE,uBADD;AAETC,qBAAW,EAAE,oCAFJ;AAGTC,mBAAS,EAAE,CAAC,mCAAD;AAHF,S;AAK2B,Q;;;;;;;;;;;;;;;;;;;;;;;;AETtC;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;;;ACeQ;;AACI;;AAAI;;AAAkB;;AACtB;;AAAI;;AAAqB;;AACzB;;AAAI;;AAAQ;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AAAoC;;AAAY;;AAAS;;AACzE;;;;;;AAHQ;;AAAA;;AACA;;AAAA;;;;;;AAeJ;;AACI;;AAAI;;AAAmE;;AAAiB;;AAAI;;AAChG;;;;;;;;AADW;;AAAA;;AAAgE;;AAAA;;;;;;AANnF;;AACI;;AACI;;AACI;;AAAI;;AAAI;;AACZ;;AACA;;AAGJ;;AACJ;;;;;;AAJY;;AAAA;;;;;;AAKZ;;AACI;;AAAG;;AAAU;;AACjB;;;;;;;;AAvCJ;;AACI;;AACI;;AAAG;;AAAQ;;AAAW;;AAAU;;AAAc;;AAC9C;;AAAG;;AAAQ;;AAAmB;;AAAU;;AAAkB;;AAC1D;;AAAG;;AAAQ;;AAAuB;;AAAU;;AAAwB;;AACpE;;AAAG;;AAAQ;;AAAoB;;AAAU;;AAAkB;;AAC/D;;AAEA;;AAAI;;AAAU;;AACd;;AACI;;AACI;;AAAI;;AAAI;;AACR;;AAAI;;AAAY;;AAChB;;AACJ;;AACA;;AAKJ;;AAEA;;AACI;;AAAG;;AAAW;;AAClB;;AAEA;;AAAI;;AAAe;;AACnB;;AAUA;;AAIA;;AAAwB;AAAA;;AAAA;;AAAA;AAAA;;AAExB;;AACJ;;;;;;AA1CwC;;AAAA;;AACQ;;AAAA;;AACI;;AAAA;;AACH;;AAAA;;AAUrC;;AAAA;;AAQD;;AAAA;;AAIF;;AAAA;;AAUA;;AAAA;;AAKD;;AAAA;;;;QD7BK2H,qB;;;AAaX,qCACUC,YADV,EAEUpI,KAFV,EAGUwB,YAHV,EAIUzB,MAJV,EAIwB;AAAA;;AAHd,aAAAqI,YAAA,GAAAA,YAAA;AACA,aAAApI,KAAA,GAAAA,KAAA;AACA,aAAAwB,YAAA,GAAAA,YAAA;AACA,aAAAzB,MAAA,GAAAA,MAAA;AAfF,aAAAsI,+BAAA,GAAkC,KAAlC;AAgBH;;;;mCAEM;AAAA;;AACT,eAAKrI,KAAL,CAAWE,MAAX,CAAkBC,SAAlB,CAA4B,UAAAD,MAAM,EAAI;AAEpC,gBAAMwB,IAAI,GAAGxB,MAAM,CAACwB,IAApB;AACA,kBAAI,CAACC,WAAL,GAAmBzB,MAAM,CAACyB,WAA1B;;AACA,gBAAM2G,eAAe,GAAG,SAAlBA,eAAkB;AAAA,qBAAM,MAAI,CAACF,YAAL,CAAkBG,QAAlB,CAA2B7G,IAA3B,EAAiC,MAAI,CAACC,WAAtC,CAAN;AAAA,aAAxB;;AACA,gBAAMgE,iBAAiB,GAAG,SAApBA,iBAAoB;AAAA,qBAAM,MAAI,CAACyC,YAAL,CAAkBI,yBAAlB,CAA4C9G,IAA5C,EAAkD,MAAI,CAACC,WAAvD,CAAN;AAAA,aAA1B;;AAEA,kBAAI,CAAC8G,uBAAL,GAA+B,4DAAKH,eAAL,EAC7B,UAAAxE,KAAK,EAAI;AACP,oBAAI,CAACW,cAAL,GAAsB,MAAI,CAACiE,sBAAL,CAA4B5E,KAA5B,CAAtB;AACA,oBAAI,CAAC6E,UAAL,GAAkB/F,IAAI,CAACC,GAAL,EAAlB;AACA,oBAAI,CAACiB,KAAL,GAAaA,KAAb;AACD,aAL4B,EAM3B3D,SAN2B,EAA/B;AAQA,kBAAI,CAACyI,gCAAL,GAAwC,4DAAKjD,iBAAL,EACtC,UAAAC,OAAO;AAAA,qBAAI,MAAI,CAACC,cAAL,GAAsBD,OAA1B;AAAA,aAD+B,EACI,MAAI,CAACyC,+BADT,EAC0ClI,SAD1C,EAAxC;AAED,WAjBD;AAkBD;;;sCAEU;AACT,6EAAY,KAAKsI,uBAAjB;AACA,6EAAY,KAAKG,gCAAjB;AACD;;;uCAEc7E,S,EAAsB;AAAA;;AACnC,eAAKqE,YAAL,CAAkBS,cAAlB,CAAiC,KAAK/E,KAAL,CAAWpC,IAA5C,EAAkDqC,SAAS,CAAC+E,eAA5D,EAA6E,KAAKnH,WAAlF,EACGxB,SADH,CACa,UAAAsG,OAAO,EAAI;AACpB,gBAAI,OAAOA,OAAP,KAAmB,QAAvB,EAAiC;AAC/B,oBAAI,CAACA,OAAL,GAAesC,IAAI,CAACC,SAAL,CAAevC,OAAf,CAAf;AACD,aAFD,MAEO;AACL,oBAAI,CAACA,OAAL,GAAeA,OAAf;AACD;AACF,WAPH,EAQI,UAAAhD,KAAK,EAAI;AACP,kBAAI,CAACjC,YAAL,CAAkBkC,SAAlB,CAA4BD,KAAK,CAACA,KAAlC;AACD,WAVL;AAWD;;;6CAEoBL,Y,EAAuB;AAC1C,cAAIA,YAAJ,EAAkB;AAChB,iBAAKC,MAAL;AACD;AACF;;;kCAEQ;AAAA;;AACP,eAAK+E,YAAL,CAAkBa,WAAlB,CAA8B,KAAKnF,KAAL,CAAWpC,IAAzC,EAA+C,KAAKC,WAApD,EACG4B,IADH,CACQ,kEAAW,UAAAC,GAAG;AAAA,mBAAI,gDAAGA,GAAG,CAACC,KAAP,CAAJ;AAAA,WAAd,CADR,EAEGtD,SAFH,CAEa,UAAAsD,KAAK,EAAI;AAClB,gBAAIA,KAAJ,EAAW;AACT,qBAAI,CAACjC,YAAL,CAAkBkC,SAAlB,CAA4BD,KAA5B;AACD,aAFD,MAEO;AACL,qBAAI,CAAC1D,MAAL,CAAY4D,aAAZ,CAA0B,MAAM,OAAI,CAAChC,WAAX,GAAyB,SAAnD;AACD;AACF,WARH;AASD;;;+CAEsBuH,Y,EAAmB;AACxC,cAAI,KAAKpF,KAAL,KAAeI,SAAnB,EAA8B;AAC5B,mBAAO,CAAP;AACD,WAFD,MAEO;AACL,gBAAMU,WAAW,GAAIsE,YAAY,CAACC,QAAb,GAAwB,KAAKrF,KAAL,CAAWqF,QAAxD;AACA,gBAAMC,SAAS,GAAG,CAACxG,IAAI,CAACC,GAAL,KAAa,KAAK8F,UAAnB,IAAiC,IAAnD;AACA,mBAAO3D,IAAI,CAACC,KAAL,CAAYL,WAAW,GAAGwE,SAAf,GAA4B,GAAvC,IAA8C,GAArD;AACD;AACF;;;;;;;uBAtFUjB,qB,EAAqB,4H,EAAA,+H,EAAA,2I,EAAA,uH;AAAA,K;;;YAArBA,qB;AAAqB,wC;AAAA,c;AAAA,a;AAAA,gM;AAAA;AAAA;ACblC;;;;AAAK;;;;;;;;;sEDaQA,qB,EAAqB;cALjC,uDAKiC;eALvB;AACT7H,kBAAQ,EAAE,mBADD;AAETC,qBAAW,EAAE,gCAFJ;AAGTC,mBAAS,EAAE,CAAC,+BAAD;AAHF,S;AAKuB,Q;;;;;;;;;;;;;;;;;;;;;;;;;;;;AEblC;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QAQa6I,Y;;;AAGX,4BACU/D,UADV,EAEUsC,uBAFV,EAE0D;AAAA;;AADhD,aAAAtC,UAAA,GAAAA,UAAA;AACA,aAAAsC,uBAAA,GAAAA,uBAAA;AAHF,aAAAR,SAAA,GAAY,4BAAZ;AAIH;;;;kCAEKzF,W,EAAmB;AAC3B,iBAAO,KAAK2D,UAAL,CAAgBE,GAAhB,CAA6B,KAAK4B,SAAL,GAAiBzF,WAAjB,GAA+B,SAA5D,CAAP;AACD;;;iCAEQD,I,EAAcC,W,EAAmB;AACxC,iBAAO,KAAK2D,UAAL,CAAgBE,GAAhB,CAA2B,KAAK4B,SAAL,GAAiBzF,WAAjB,GAA+B,UAA/B,GAA4CD,IAAvE,CAAP;AACD;;;kDAGC4H,S,EACA3H,W,EAAmB;AACnB,iBAAO,KAAK2D,UAAL,CAAgBE,GAAhB,CAA8B,KAAK4B,SAAL,GAAiBzF,WAAjB,GAA+B,UAA/B,GAA4C2H,SAA5C,GAAwD,kBAAtF,CAAP;AACD;;;uCAEcxF,K,EAAegF,e,EAAyBnH,W,EAAmB;AACxE,cAAM4D,GAAG,GAAG,KAAK6B,SAAL,GAAiBzF,WAAjB,GAA+B,UAA/B,GAA4CmC,KAA5C,GAAoD,GAApD,GAA0DgF,eAA1D,GAA4E,cAAxF;AACA,iBAAO,KAAKxD,UAAL,CAAgBE,GAAhB,CAAoBD,GAApB,EACL;AAAEgE,wBAAY,EAAE;AAAhB,WADK,CAAP;AAED;;;oCAEWzF,K,EAAenC,W,EAAmB;AAC5C,cAAM4D,GAAG,GAAG,KAAK6B,SAAL,GAAiBzF,WAAjB,GAA+B,UAA/B,GAA4CmC,KAAxD;AACA,iBAAO,KAAKwB,UAAL,CAAgBjC,MAAhB,CAAuBkC,GAAvB,CAAP;AACD;;;;;;;uBA/BU8D,Y,EAAY,uH,EAAA,0I;AAAA,K;;;aAAZA,Y;AAAY,eAAZA,YAAY,K;AAAA,kBAFX;;;;;sEAEDA,Y,EAAY;cAHxB,wDAGwB;eAHb;AACV5D,oBAAU,EAAE;AADF,S;AAGa,Q;;;;;;;;;;;;;;;;;;;;;;;;ACRzB;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;ACWQ;;AACI;;AAAI;;AAA+B;;AAAc;;AAAI;;AACrD;;AAAI;;AAAkB;;AACtB;;AAAI;;AAAwB;;AAChC;;;;;;AAHW;;AAAA;;AAA4B;;AAAA;;AAC/B;;AAAA;;AACA;;AAAA;;;;QDLH+D,c;;;AAIX,8BACUpB,YADV,EAEUpI,KAFV,EAEiC;AAAA;;AADvB,aAAAoI,YAAA,GAAAA,YAAA;AACA,aAAApI,KAAA,GAAAA,KAAA;AAJV,aAAAyJ,MAAA,GAAkB,EAAlB;AACA,aAAAC,aAAA,GAAyB,EAAzB;AAGmC;;;;sCAErB3D,K,EAAO;AACnB,cAAMC,WAAW,GAAGD,KAAK,CAACE,MAAN,CAAaC,KAAb,CAAmBC,WAAnB,EAApB;;AACA,cAAIH,WAAW,KAAK9B,SAAhB,IAA6B8B,WAAW,KAAK,EAAjD,EAAqD;AACnD,iBAAK0D,aAAL,GAAqB,KAAKD,MAA1B;AACD,WAFD,MAEO;AACL,iBAAKC,aAAL,GAAqB,KAAKD,MAAL,CAAYrD,MAAZ,CAAmB,UAAAtC,KAAK;AAAA,qBAAIA,KAAK,CAACpC,IAAN,CAAWyE,WAAX,GAAyBE,QAAzB,CAAkCL,WAAlC,CAAJ;AAAA,aAAxB,CAArB;AACD;AACF;;;mCAEO;AAAA;;AACN,eAAKhG,KAAL,CAAWE,MAAX,CAAkBC,SAAlB,CAA4B,UAAAD,MAAM,EAAI;AACpC,mBAAI,CAACkI,YAAL,CAAkBuB,SAAlB,CAA4BzJ,MAAM,CAACyB,WAAnC,EACCxB,SADD,CACW,UAAAsJ,MAAM,EAAI;AACnB,qBAAI,CAACA,MAAL,GAAcA,MAAd;AACA,qBAAI,CAACC,aAAL,GAAqBD,MAArB;AACD,aAJD;AAKD,WAND;AAOD;;;wCAEe3F,K,EAAY;AAC1B,iBAAOA,KAAK,CAAC1B,UAAN,CAAiBC,GAAjB,CAAqB,UAAAC,EAAE;AAAA,mBAAIA,EAAE,CAACZ,IAAP;AAAA,WAAvB,EAAoCkI,QAApC,EAAP;AACD;;;;;;;uBA7BUJ,c,EAAc,4H,EAAA,+H;AAAA,K;;;YAAdA,c;AAAc,gC;AAAA,e;AAAA,a;AAAA,4K;AAAA;AAAA;ACT3B;;AACI;;AACI;;AAA+C;;AAAO;;AACtD;;AAA8C;AAAA,mBAAS,IAAAlD,aAAA,QAAT;AAA8B,WAA9B;;AAA9C;;AACJ;;AACA;;AACI;;AACI;;AAAI;;AAAI;;AACR;;AAAI;;AAAQ;;AACZ;;AAAI;;AAAU;;AAClB;;AACA;;AAKJ;;AACJ;;;;AANY;;AAAA;;;;;;;;;sEDFCkD,c,EAAc;cAL1B,uDAK0B;eALhB;AACTlJ,kBAAQ,EAAE,WADD;AAETC,qBAAW,EAAE,wBAFJ;AAGTC,mBAAS,EAAE,CAAC,uBAAD;AAHF,S;AAKgB,Q;;;;;;;;;;;;;;;;;;;;;;;;AET3B;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAGO,aAASqJ,IAAT,CAAiBjI,MAAjB,EAA8CE,OAA9C,EAA0F;AAAA,UAAtBgI,OAAsB,uEAAJ,IAAI;AAC7F,aAAO,gDAAG,EAAH,EAAOvG,IAAP,CACH,gEAAS,UAAAgE,CAAC;AAAA,eAAI3F,MAAM,EAAV;AAAA,OAAV,CADG,EAEH,2DAAIE,OAAJ,CAFG,EAGH,6DAAMgI,OAAN,CAHG,EAIH,+DAJG,CAAP;AAOH;;AAEM,aAAShD,WAAT,CAAqBF,YAArB,EAAiD;AACpD,UAAIA,YAAJ,EAAkB;AACdA,oBAAY,CAACE,WAAb;AACH;AACJ;;;;;;;;;;;;;;;;;ACjBD;AAAA;;;AAAA;AAAA;AAAA,O,CAAA;AACA;AACA;;;AAEO,QAAMnF,WAAW,GAAG;AACzBoI,gBAAU,EAAE;AADa,KAApB;AAIP;;;;;;;AAOA;;;;;;;;;;;;;;;;;ACfA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAMA,QAAI,sEAAYA,UAAhB,EAA4B;AAC1B;AACD;;AAED,gFAAyBC,eAAzB,CAAyC,yDAAzC,EACGC,KADH,CACS,UAAAC,GAAG;AAAA,aAAIxD,OAAO,CAACjD,KAAR,CAAcyG,GAAd,CAAJ;AAAA,KADZ","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\n\nconst routes: Routes = [];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","import { Component, OnInit } from '@angular/core';\nimport { KafkaEnvironmentService } from './kafka-environment.service';\nimport { ActivatedRoute, Router, PRIMARY_OUTLET } from '@angular/router';\nimport { Title } from '@angular/platform-browser';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent implements OnInit {\n  applicationLoaded = false;\n\n  constructor(\n    public environmentService: KafkaEnvironmentService,\n    private router: Router,\n    private route: ActivatedRoute) { }\n\n  ngOnInit(): void {\n    this.route.params.subscribe(params => {\n      this.environmentService.loadEnvironment().subscribe(\n        result => {\n          this.applicationLoaded = result;\n        }\n      );\n    });\n  }\n}\n","<div *ngIf=\"applicationLoaded\">\n    <nav class=\"main-nav\">\n        <a routerLink=\"{{environmentService.getCurrentEnvironment()}}/topics\">Topics</a>\n        <a routerLink=\"{{environmentService.getCurrentEnvironment()}}/consumer-groups\">Consumer Group</a>\n        <app-kafka-environment></app-kafka-environment>\n    </nav>\n    <div class=\"main-container\">\n        <router-outlet></router-outlet>\n        <app-error-modal></app-error-modal>\n    </div>\n</div>\n\n<div *ngIf=\"!applicationLoaded\">\n    <p>Loading...</p>\n</div>","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { TopicComponent } from './topic/topic.component';\nimport { HttpClientModule } from '@angular/common/http';\nimport { ConsumerGroupsComponent } from './consumer-groups/consumer-groups.component';\nimport { RouterModule, Routes } from '@angular/router';\nimport { TopicDetailsComponent } from './topic-details/topic-details.component';\nimport { ConsumerGroupDetailsComponent } from './consumer-group-details/consumer-group-details.component';\nimport { KafkaEnvironmentComponent } from './kafka-environment/kafka-environment.component';\nimport { ErrorModalComponent } from './error-modal/error-modal.component';\nimport { ConfirmationModalComponent } from './confirmation-modal/confirmation-modal.component';\n\nconst appRoutes: Routes = [\n  { path: ':environment/topics', component: TopicComponent },\n  { path: ':environment/topics/:name', component: TopicDetailsComponent },\n  { path: ':environment/consumer-groups', component: ConsumerGroupsComponent },\n  { path: ':environment/consumer-groups/:name', component: ConsumerGroupDetailsComponent }\n];\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    TopicComponent,\n    ConsumerGroupsComponent,\n    TopicDetailsComponent,\n    ConsumerGroupDetailsComponent,\n    KafkaEnvironmentComponent,\n    ErrorModalComponent,\n    ConfirmationModalComponent\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    HttpClientModule,\n    RouterModule.forRoot(\n      appRoutes\n    )\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'app-confirmation-modal',\n  templateUrl: './confirmation-modal.component.html',\n  styleUrls: ['./confirmation-modal.component.css']\n})\nexport class ConfirmationModalComponent implements OnInit {\n\n  @Input() message: string;\n  @Input() buttonName: string;\n  @Output() confirmationResult = new EventEmitter<boolean>();\n\n  hidden = true;\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n  emitResult(accepted: boolean) {\n    this.confirmationResult.emit(accepted);\n    this.hidden = true;\n  }\n\n  showModal() {\n    this.hidden = false;\n  }\n\n}\n","<div class=\"confirmation\">\n    <button (click)=\"showModal()\">{{buttonName}}</button>\n    <div *ngIf=\"!hidden\" class=\"confirmation-modal\">\n        <div class=\"window\">\n            <p>{{message}}</p>\n            <button (click)=\"emitResult(true)\">Accept</button>\n            <button (click)=\"emitResult(false)\">Cancel</button>\n        </div>\n    </div>\n</div>","import { Component, OnInit, OnDestroy } from '@angular/core';\nimport { ConsumerGroupsService } from '../consumer-groups.service';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { of, timer, Observable, Subscription } from 'rxjs';\nimport { map, mergeMap, tap, delay, repeat, catchError } from 'rxjs/operators';\nimport { pull, unsubscribe } from '../utils/pulling';\nimport { ErrorServiceService } from '../error-service.service';\n\n@Component({\n  selector: 'app-consumer-group-details',\n  templateUrl: './consumer-group-details.component.html',\n  styleUrls: ['./consumer-group-details.component.css']\n})\nexport class ConsumerGroupDetailsComponent implements OnInit, OnDestroy {\n\n  consumerGroup: ConsumerGroup;\n  consumerGroupMetaData: ConsumerGroupMetaData;\n  lagSum: number;\n  environment: string;\n  lastCGUpdate: number;\n  dataCollector: ConsumerGroupDataDiff;\n  private consumerGroupSubscription: Subscription;\n  private consumerGroupMDSubscription: Subscription;\n\n  constructor(\n    private consumerGroupsService: ConsumerGroupsService,\n    private route: ActivatedRoute,\n    private errorService: ErrorServiceService,\n    private router: Router\n  ) { }\n\n  ngOnInit() {\n    this.route.params.subscribe(params => {\n      this.removeSubscribtions();\n      const name = params.name;\n      this.environment = params.environment;\n\n      const getter = () => this.consumerGroupsService.getConsumerGroup(name, this.environment);\n      const updater = (cg: ConsumerGroup) => {\n        this.dataCollector = this.calulcateConsumerGroupDataDiff(cg);\n        this.consumerGroup = cg;\n        this.lagSum = cg.partitions.map(it => it.lag).reduce((part, sum) => part + sum);\n        this.lastCGUpdate = Date.now();\n      };\n      this.consumerGroupSubscription = pull(getter, updater).subscribe();\n\n      const metaDataGetter = () => this.consumerGroupsService.getConsumerGroupMetaData(name, this.environment);\n      const metaDataUpdater = cg => this.consumerGroupMetaData = cg;\n      this.consumerGroupMDSubscription = pull(metaDataGetter, metaDataUpdater, 10000).subscribe();\n    });\n  }\n\n  ngOnDestroy(): void {\n    this.removeSubscribtions();\n  }\n\n  private removeSubscribtions() {\n    unsubscribe(this.consumerGroupSubscription);\n    unsubscribe(this.consumerGroupMDSubscription);\n  }\n\n  onConfirmation(shouldDelete: boolean) {\n    if (shouldDelete) {\n      this.delete();\n    }\n  }\n\n  delete() {\n    this.consumerGroupsService.deleteConsumerGroup(this.consumerGroup.name, this.environment)\n      .pipe(catchError(val => of(val.error)))\n      .subscribe(error => {\n        if (error) {\n          this.errorService.showError(error);\n        } else {\n          this.router.navigateByUrl('/' + this.environment + '/consumer-groups');\n        }\n      });\n  }\n\n  joinPartitionAssigments(assignments: TopicPartition[]): string {\n    return assignments.map(assignment => assignment.topic + '_' + assignment.partition).join(' | ');\n  }\n\n  calulcateConsumerGroupDataDiff(newConsumerGroup: ConsumerGroup): ConsumerGroupDataDiff {\n    if (this.consumerGroup === undefined) {\n      const lagDiffMap = new Map<Partition, LagData>();\n      newConsumerGroup.partitions.forEach(part => lagDiffMap.set(part.partition, { lagValue: 0, lagPerSecound: 0 }));\n      return {\n        messagesPerSec: 0,\n        lagPerSec: 0\n        // lagDiff: lagDiffMap\n      };\n    }\n    const timeDiffSec = (Date.now() - this.lastCGUpdate) / 1000;\n    const newMessages = this.messageCount(newConsumerGroup) - this.messageCount(this.consumerGroup);\n    const newLag = this.lagCount(newConsumerGroup) - this.lagCount(this.consumerGroup);\n    const messagesPerSec = Math.round((newMessages / timeDiffSec) * 100) / 100;\n    const lagPerSec = Math.round((newLag / timeDiffSec) * 100) / 100;\n\n    return {\n      messagesPerSec,\n      lagPerSec\n    };\n  }\n\n  private messageCount(consumerGroup: ConsumerGroup): number {\n    return consumerGroup.partitions.map(it => it.partition.lastLog).reduce((a, b) => a + b);\n  }\n\n  private lagCount(consumerGroup: ConsumerGroup): number {\n    return consumerGroup.partitions.map(it => it.lag).reduce((a, b) => a + b);\n  }\n\n}\n\ninterface ConsumerGroupDataDiff {\n  messagesPerSec: number;\n  lagPerSec: number;\n  // lagDiff: Map<Partition, LagData>;\n}\n\ninterface LagData {\n  lagValue: number;\n  lagPerSecound: number;\n}\n","<div *ngIf=\"consumerGroup !== undefined\">\n    <h2>{{consumerGroup.name}}</h2>\n    <table>\n        <tr>\n            <th>Total Lag</th>\n            <th>Lag increase per second</th>\n            <th>Message consumtion per second</th>\n        </tr>\n        <tr>\n            <td>{{lagSum}}</td>\n            <td>{{dataCollector.lagPerSec}}</td>\n            <td>{{dataCollector.messagesPerSec}}</td>\n        </tr>\n    </table>\n    <h2>Partitions</h2>\n\n    <table>\n        <tr>\n            <th>Name</th>\n            <th>Events count</th>\n            <th>Lag</th>\n        </tr>\n        <tr *ngFor=\"let partitionInfo of consumerGroup.partitions\">\n            <td>{{partitionInfo.partition.name}}</td>\n            <td>{{partitionInfo.partition.lastLog}}</td>\n            <td>{{partitionInfo.lag}}</td>\n        </tr>\n    </table>\n\n    <h2>Consumer group state</h2>\n    <div *ngIf=\"consumerGroupMetaData !== undefined\">\n        <table>\n            <tr>\n                <th>State</th>\n                <th>Partition assignor</th>\n                <th>Coordinator</th>\n            </tr>\n            <tr>\n                <td>{{consumerGroupMetaData.consumerGroupState}}</td>\n                <td>{{consumerGroupMetaData.partitionAssignor}}</td>\n                <td>{{consumerGroupMetaData.coordinator}}</td>\n            </tr>\n        </table>\n\n        <table>\n            <tr>\n                <th>Member id</th>\n                <th>Client id</th>\n                <th>Host</th>\n                <th>Assign partitions</th>\n            </tr>\n            <tr *ngFor=\"let memberDescription of consumerGroupMetaData.memberDescriptionList\">\n                <td>{{memberDescription.memberId}}</td>\n                <td>{{memberDescription.clientId}}</td>\n                <td>{{memberDescription.host}}</td>\n                <td>{{joinPartitionAssigments(memberDescription.assignment.topicPartitions)}}</td>\n            </tr>\n        </table>\n    </div>\n    <div *ngIf=\"consumerGroupMetaData === undefined\">\n        <p>Loading...</p>\n    </div>\n\n    <h2>Topics</h2>\n    <table>\n        <tr>\n            <th>Name</th>\n        </tr>\n        <tr *ngFor=\"let topic of consumerGroup.topicNames\">\n            <td><a routerLink=\"/{{environment}}/topics/{{topic}}\">{{topic}}</a></td>\n        </tr>\n    </table>\n    <app-confirmation-modal (confirmationResult)=\"onConfirmation($event)\"\n        message=\"Do you want to delete {{consumerGroup.name}} consumer group?\" buttonName=\"Delete\">\n    </app-confirmation-modal>\n</div>","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable, of } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ConsumerGroupsService {\n\n  private url = 'http://localhost:8080/api/';\n\n  constructor(\n    private httpClient: HttpClient\n  ) { }\n\n  getConsumerGroupsNames(environment: string): Observable<string[]> {\n    return this.httpClient.get<string[]>(this.url + environment + '/consumer-groups');\n  }\n\n\n  getConsumerGroups(environment: string): Observable<ConsumerGroup[]> {\n    return this.httpClient.get<ConsumerGroup[]>(this.url + environment + '/consumer-groups');\n  }\n\n  getConsumerGroupMetaData(name: string, environment: string) {\n    return this.httpClient.get<ConsumerGroupMetaData>(this.url + environment + '/consumer-groups' + '/' + name + '/meta-data');\n  }\n\n  getConsumerGroup(name: string, environment: string): Observable<ConsumerGroup> {\n    return this.httpClient.get<ConsumerGroup>(this.url + environment + '/consumer-groups' + '/' + name);\n  }\n\n  deleteConsumerGroup(name: string, environment: string): Observable<any> {\n    return this.httpClient.delete(this.url + environment + '/consumer-groups' + '/' + name);\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { ConsumerGroupsService } from '../consumer-groups.service';\nimport { ActivatedRoute } from '@angular/router';\n\n@Component({\n  selector: 'app-consumer-groups',\n  templateUrl: './consumer-groups.component.html',\n  styleUrls: ['./consumer-groups.component.css']\n})\nexport class ConsumerGroupsComponent implements OnInit {\n\n  consumerGroups: ConsumerGroup[];\n  displayGroups: ConsumerGroup[];\n\n  constructor(\n    private consumerGroupsService: ConsumerGroupsService,\n    private route: ActivatedRoute\n  ) { }\n\n\n  ngOnInit() {\n    this.route.params.subscribe(params => {\n      const environment = params.environment;\n\n      this.consumerGroupsService.getConsumerGroups(environment)\n        .subscribe(cGroups => {\n          this.consumerGroups = cGroups;\n          this.displayGroups = cGroups;\n        });\n    });\n  }\n\n  onFilterInput(event) {\n    const filterValue = event.target.value.toLowerCase();\n    if (filterValue === undefined || filterValue === '') {\n      this.displayGroups = this.consumerGroups;\n    } else {\n      this.displayGroups = this.consumerGroups.filter(cg => cg.name.toLowerCase().includes(filterValue));\n    }\n  }\n\n}\n","<div>\n    <div class=\"filter\">\n        <label for=\"filter-input\" class=\"filter-label\">Filter:</label>\n        <input id=\"filter-input\" class=\"filter-input\" (keyup)=\"onFilterInput($event)\"/>\n    </div>\n    <table>\n        <tr>\n            <th>Name</th>\n            <th>Topics</th>\n        </tr>\n        <tr *ngFor=\"let consumerGroup of displayGroups\">\n            <td><a routerLink=\"{{consumerGroup.name}}\">{{consumerGroup.name}}</a></td>\n            <td>{{consumerGroup.topicNames}}</td>\n        </tr>\n    </table>\n</div>","import { Component, OnInit, OnDestroy } from '@angular/core';\nimport { ErrorServiceService } from '../error-service.service';\nimport { Subscription } from 'rxjs';\n\n@Component({\n  selector: 'app-error-modal',\n  templateUrl: './error-modal.component.html',\n  styleUrls: ['./error-modal.component.css']\n})\nexport class ErrorModalComponent implements OnInit, OnDestroy {\n\n  message = 'no error';\n  hidden = true;\n  private subscription: Subscription;\n  constructor(private errorServiceService: ErrorServiceService) { }\n\n  ngOnInit(): void {\n    console.log('subscribing to errors');\n    this.subscription = this.errorServiceService.subscriveToErrors(error => {\n      this.hidden = false;\n      this.message = error;\n    });\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n  }\n\n  closeModal() {\n    this.hidden = true;\n  }\n\n}\n","<div *ngIf=\"!hidden\" class=\"error-modal\">\n    <div class=\"window\">\n        <p>{{message}}</p>\n        <button (click)=\"closeModal()\">OK</button>\n    </div>\n</div>\n","import { Injectable } from '@angular/core';\nimport { Subject } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ErrorServiceService {\n\n  private errorsStream = new Subject();\n\n  constructor() { }\n\n  showError(error: string) {\n    console.log('showing error' + error);\n    this.errorsStream.next(error);\n  }\n\n  subscriveToErrors(errorHandler: (error) => void) {\n    console.log('creating subscription for errors');\n    return this.errorsStream.subscribe(errorHandler);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { tap, map } from 'rxjs/operators';\nimport { Router } from '@angular/router';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class KafkaEnvironmentService {\n\n  currentEnvironment: string;\n\n  private readonly serverUrl = 'http://localhost:8080/api';\n  private environments: KafkaEnvironment[];\n  constructor(\n    private httpClient: HttpClient,\n    private router: Router,\n  ) { }\n\n  getAwailableEnvironments(): Observable<KafkaEnvironment[]> {\n    return this.httpClient.get<KafkaEnvironment[]>(this.serverUrl + '/environments');\n  }\n\n  loadEnvironment(): Observable<boolean> {\n    return this.getAwailableEnvironments()\n      .pipe(\n        tap(environments => this.environments = environments),\n        map(_ => true)\n      );\n  }\n\n\n  getCurrentEnvironment(): string {\n    const rsult = this.router.url.split('/')[1] || this.environments[0].name;\n    return decodeURI(rsult);\n  }\n\n\n}\n\nexport interface KafkaEnvironment {\n  name: string;\n}\n","import { Component, OnInit } from '@angular/core';\nimport { KafkaEnvironmentService, KafkaEnvironment } from '../kafka-environment.service';\nimport { Router, PRIMARY_OUTLET } from '@angular/router';\n\n@Component({\n  selector: 'app-kafka-environment',\n  templateUrl: './kafka-environment.component.html',\n  styleUrls: ['./kafka-environment.component.css']\n})\nexport class KafkaEnvironmentComponent implements OnInit {\n\n  selectedEnv: string;\n  environments: string[] = [];\n  constructor(\n    private kafkaEnvironmentService: KafkaEnvironmentService,\n    private router: Router\n  ) { }\n\n  ngOnInit(): void {\n    this.kafkaEnvironmentService.getAwailableEnvironments().subscribe(\n      it => this.environments = it.map(env => env.name)\n    );\n    this.selectedEnv = this.kafkaEnvironmentService.getCurrentEnvironment();\n  }\n\n  onSelectChange(event): void {\n    const envName = event.target.value;\n    this.selectedEnv = this.environments.filter(it => it === envName)[0];\n    const urlParts = this.router.url.split('/');\n    urlParts[1] = envName;\n    this.router.navigateByUrl(urlParts.join('/'));\n  }\n\n\n}\n","<div class=\"environment\">\n    <label for=\"environment\">Environments</label>\n        <select (change)=\"onSelectChange($event)\" id=\"environment\">\n            <option class=\"environment-option\" [selected]=\"env === selectedEnv\" *ngFor=\"let env of environments\">\n                {{env}}\n            </option>\n        </select>\n</div>","import { Component, OnInit, OnDestroy } from '@angular/core';\nimport { TopicService } from '../topic.service';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { pull, unsubscribe } from '../utils/pulling';\nimport { Subscription, of } from 'rxjs';\nimport { ErrorServiceService } from '../error-service.service';\nimport { catchError } from 'rxjs/operators';\n\n@Component({\n  selector: 'app-topic-details',\n  templateUrl: './topic-details.component.html',\n  styleUrls: ['./topic-details.component.css']\n})\nexport class TopicDetailsComponent implements OnInit, OnDestroy {\n\n  private CONSUMER_GROUP_PULL_INTERVAL_MS = 30000;\n\n  topic: Topic;\n  consumerGroups: string[];\n  message: string;\n  environment: string;\n  messagesPerSec: number;\n  private lastUpdate: number;\n  private topicUpdateSubscription: Subscription;\n  private consumerGroupsUpdateSubscription: Subscription;\n\n  constructor(\n    private topicService: TopicService,\n    private route: ActivatedRoute,\n    private errorService: ErrorServiceService,\n    private router: Router\n  ) { }\n\n  ngOnInit() {\n    this.route.params.subscribe(params => {\n\n      const name = params.name;\n      this.environment = params.environment;\n      const getTopicDetails = () => this.topicService.getTopic(name, this.environment);\n      const getConsumerGroups = () => this.topicService.getConsumerGroupsForTopic(name, this.environment);\n\n      this.topicUpdateSubscription = pull(getTopicDetails,\n        topic => {\n          this.messagesPerSec = this.calculateMessagePerSec(topic);\n          this.lastUpdate = Date.now();\n          this.topic = topic;\n        }\n        ).subscribe();\n\n      this.consumerGroupsUpdateSubscription = pull(getConsumerGroups,\n        cGroups => this.consumerGroups = cGroups, this.CONSUMER_GROUP_PULL_INTERVAL_MS).subscribe();\n    });\n  }\n\n  ngOnDestroy(): void {\n    unsubscribe(this.topicUpdateSubscription);\n    unsubscribe(this.consumerGroupsUpdateSubscription);\n  }\n\n  getLastMessage(partition: Partition) {\n    this.topicService.getLastMessage(this.topic.name, partition.partitionNumber, this.environment)\n      .subscribe(message => {\n        if (typeof message === 'object') {\n          this.message = JSON.stringify(message);\n        } else {\n          this.message = message;\n        }\n      },\n        error => {\n          this.errorService.showError(error.error);\n        });\n  }\n\n  onDeleteConfirmation(shouldDelete: boolean) {\n    if (shouldDelete) {\n      this.delete();\n    }\n  }\n\n  delete() {\n    this.topicService.deleteTopic(this.topic.name, this.environment)\n      .pipe(catchError(val => of(val.error)))\n      .subscribe(error => {\n        if (error) {\n          this.errorService.showError(error);\n        } else {\n          this.router.navigateByUrl('/' + this.environment + '/topics');\n        }\n      });\n  }\n\n  calculateMessagePerSec(newTopicData: Topic): number {\n    if (this.topic === undefined) {\n      return 0;\n    } else {\n      const newMessages = (newTopicData.messages - this.topic.messages);\n      const secPassed = (Date.now() - this.lastUpdate) / 1000;\n      return Math.round((newMessages / secPassed) * 100) / 100;\n    }\n  }\n\n}\n","<div *ngIf=\"topic !== undefined\">\n    <div class=\"topic-info\">\n        <p><strong>Topic name:</strong> {{topic.name}}</p>\n        <p><strong>Topic events count:</strong> {{topic.messages}}</p>\n        <p><strong>Topic partitions count:</strong> {{topic.partitionCount}}</p>\n        <p><strong>Messages per second:</strong> {{messagesPerSec}}</p>\n    </div>\n\n    <h2>Partitions</h2>\n    <table>\n        <tr>\n            <th>Name</th>\n            <th>Events count</th>\n            <th></th>\n        </tr>\n        <tr *ngFor=\"let partition of topic.partitions\">\n            <td>{{partition.name}}</td>\n            <td>{{partition.lastLog}}</td>\n            <td><button (click)=\"getLastMessage(partition)\">Last message</button></td>\n        </tr>\n    </table>\n\n    <div id=\"lastMessageBox\">\n        <p>{{message}}</p>\n    </div>\n\n    <h2>Consumer groups</h2>\n    <div *ngIf=\"consumerGroups !== undefined\">\n        <table>\n            <tr>\n                <th>Name</th>\n            </tr>\n            <tr *ngFor=\"let consumerGroup of consumerGroups\">\n                <td><a routerLink=\"/{{environment}}/consumer-groups/{{consumerGroup}}\">{{consumerGroup}}</a></td>\n            </tr>\n        </table>\n    </div>\n    <div *ngIf=\"consumerGroups === undefined\">\n        <p>Loading...</p>\n    </div>\n\n    <app-confirmation-modal (confirmationResult)=\"onDeleteConfirmation($event)\"\n        message=\"Do you want to delete {{topic.name}} topic ?\" buttonName=\"Delete\">\n    </app-confirmation-modal>\n</div>","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable, of } from 'rxjs';\nimport { KafkaEnvironmentService } from './kafka-environment.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TopicService {\n\n  private serverUrl = 'http://localhost:8080/api/';\n  constructor(\n    private httpClient: HttpClient,\n    private kafkaEnvironmentService: KafkaEnvironmentService\n  ) { }\n\n  getTopics(environment: string): Observable<Topic[]> {\n    return this.httpClient.get<Topic[]>(this.serverUrl + environment + '/topics');\n  }\n\n  getTopic(name: string, environment: string): Observable<Topic> {\n    return this.httpClient.get<Topic>(this.serverUrl + environment + '/topics/' + name);\n  }\n\n  getConsumerGroupsForTopic(\n    topicName: string,\n    environment: string): Observable<string[]> {\n    return this.httpClient.get<string[]>(this.serverUrl + environment + '/topics/' + topicName + '/consumer-groups');\n  }\n\n  getLastMessage(topic: string, partitionNumber: number, environment: string): Observable<string> {\n    const url = this.serverUrl + environment + '/topics/' + topic + '/' + partitionNumber + '/lastMessage';\n    return this.httpClient.get(url,\n      { responseType: 'text' });\n  }\n\n  deleteTopic(topic: string, environment: string): Observable<any> {\n    const url = this.serverUrl + environment + '/topics/' + topic;\n    return this.httpClient.delete(url);\n  }\n\n}\n","import { Component, OnInit, Input } from '@angular/core';\nimport { TopicService } from '../topic.service';\nimport { Router, ActivatedRoute } from '@angular/router';\n\n@Component({\n  selector: 'app-topic',\n  templateUrl: './topic.component.html',\n  styleUrls: ['./topic.component.css']\n})\nexport class TopicComponent implements OnInit {\n\n  topics: Topic[] = [];\n  displayTopics: Topic[] = [];\n  constructor(\n    private topicService: TopicService,\n    private route: ActivatedRoute) {}\n\n  onFilterInput(event) {\n    const filterValue = event.target.value.toLowerCase();\n    if (filterValue === undefined || filterValue === '') {\n      this.displayTopics = this.topics;\n    } else {\n      this.displayTopics = this.topics.filter(topic => topic.name.toLowerCase().includes(filterValue));\n    }\n  }\n\n  ngOnInit(): void {\n    this.route.params.subscribe(params => {\n      this.topicService.getTopics(params.environment)\n      .subscribe(topics => {\n        this.topics = topics;\n        this.displayTopics = topics;\n      });\n    });\n  }\n\n  partitionString(topic: Topic): string {\n    return topic.partitions.map(it => it.name).toString();\n  }\n\n}\n","<div>\n    <div class=\"filter\">\n        <label for=\"filter-input\" class=\"filter-label\">Filter:</label>\n        <input id=\"filter-input\" class=\"filter-input\" (keyup)=\"onFilterInput($event)\"/>\n    </div>\n    <table>\n        <tr>\n            <th>Name</th>\n            <th>Messages</th>\n            <th>Partitions</th>\n        </tr>\n        <tr *ngFor=\"let topic of displayTopics\">\n            <td><a routerLink=\"{{topic.name}}\">{{topic.name}}</a></td>\n            <td>{{topic.messages}}</td>\n            <td>{{topic.partitionCount}}</td>\n        </tr>\n    </table>\n</div>","import { Observable, of, Subscription } from 'rxjs';\r\nimport { mergeMap, tap, repeat, delay } from 'rxjs/operators';\r\n\r\nexport function pull<T>(getter: () => Observable<T>, updater: (T) => void, delayMs: number = 1000): Observable<any> {\r\n    return of({}).pipe(\r\n        mergeMap(_ => getter()),\r\n        tap(updater),\r\n        delay(delayMs),\r\n        repeat()\r\n    );\r\n\r\n}\r\n\r\nexport function unsubscribe(subscription: Subscription) {\r\n    if (subscription) {\r\n        subscription.unsubscribe();\r\n    }\r\n}\r\n\r\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"]}